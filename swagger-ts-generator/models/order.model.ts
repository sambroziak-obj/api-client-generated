/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { status } from '';

export interface IOrder {
    id?: number;
    petId?: number;
    quantity?: number;
    shipDate?: Date;
    status?: status;
    complete?: boolean;
}


export class Order extends BaseModel implements IOrder  {

    static ID_FIELD_NAME = 'id';
    static PET_ID_FIELD_NAME = 'petId';
    static QUANTITY_FIELD_NAME = 'quantity';
    static SHIP_DATE_FIELD_NAME = 'shipDate';
    static STATUS_FIELD_NAME = 'status';
    static COMPLETE_FIELD_NAME = 'complete';

    id: number;
    petId: number;
    quantity: number;
    shipDate: Date;
    /** Order Status */
    status: status;
    complete: boolean;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: Partial<IOrder>, useFormGroupValuesToModel = false) {
        super();

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IOrder>, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.id = this.getValue<number>(rawValues, Order.ID_FIELD_NAME);
            this.petId = this.getValue<number>(rawValues, Order.PET_ID_FIELD_NAME);
            this.quantity = this.getValue<number>(rawValues, Order.QUANTITY_FIELD_NAME);
            this.shipDate = this.getValue<Date>(rawValues, Order.SHIP_DATE_FIELD_NAME);
            this.status = this.getValue<status>(rawValues, Order.STATUS_FIELD_NAME);
            this.complete = this.getValue<boolean>(rawValues, Order.COMPLETE_FIELD_NAME);
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                id: new FormControl(this.id),
                petId: new FormControl(this.petId),
                quantity: new FormControl(this.quantity),
                shipDate: new FormControl(this.shipDate),
                status: new FormControl(this.status, [enumValidator(status), ]),
                complete: new FormControl(this.complete),
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls[Order.ID_FIELD_NAME].setValue(this.id);
        this.$formGroup.controls[Order.PET_ID_FIELD_NAME].setValue(this.petId);
        this.$formGroup.controls[Order.QUANTITY_FIELD_NAME].setValue(this.quantity);
        this.$formGroup.controls[Order.SHIP_DATE_FIELD_NAME].setValue(this.shipDate);
        this.$formGroup.controls[Order.STATUS_FIELD_NAME].setValue(this.status);
        this.$formGroup.controls[Order.COMPLETE_FIELD_NAME].setValue(this.complete);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}
